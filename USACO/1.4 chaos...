/*
ID: alicerd1
PROG: milk3
LANG: C++
*/
#include<iostream>
#include<cstring>
#include<cmath>
#include <algorithm>
#include<fstream>
using namespace std;
ofstream fout("milk3.out");
ifstream fin("milk3.in");
int progress[25][25][25] = { 0 };
struct bucket
{
	int now, full;
};
bucket a[4];
struct ans1
{
	int b[4];
};
ans1 queue[8000];
int ans[25] = { 0 };
int num = 0;
int tail = 0;
void init()
{
	fin >> a[1].full >> a[2].full >> a[3].full;
	a[1].now = 0;
	a[2].now = 0;
	a[3].now = a[3].full;
	progress[0][0][a[3].full]++;
	ans[num] = a[3].now;
	num++;
	for (int i = 1; i <= 3; i++)
		queue[tail].b[i] = a[i].now;
	tail++;
}
bool pour(int x,int y,int pointer)
{
	if (queue[pointer].b[x] == 0)
		return false;
	if (queue[pointer].b[y] == a[y].full)
		return false;
	for (int i = 1; i<4; i++)
		queue[tail].b[i] = queue[pointer].b[i];
	if (queue[pointer].b[x] > a[y].full - queue[pointer].b[y])
	{
		queue[tail].b[x] = queue[pointer].b[x] - (a[y].full - queue[pointer].b[y]);
		queue[tail].b[y] = a[y].full;
	}
	else
		queue[tail].b[y] = queue[pointer].b[x] + queue[pointer].b[y],queue[tail].b[x] = 0;
	if (progress[queue[tail].b[1]][queue[tail].b[2]][queue[tail].b[3]] == 1)
	{
		for (int i = 1; i<4; i++)
			queue[tail].b[i] = 0;  return false;
	}
	progress[queue[tail].b[1]][queue[tail].b[2]][queue[tail].b[3]]++;
	if (queue[tail].b[1] == 0)
		ans[num] = queue[tail].b[3], num++;
	tail++;
	return true;
}
void solve(int pointer)
{
	if (pointer == 0)
	{
		bool final = false;
		final = pour(3, 1, 0);
		final = pour(3, 2, 0);
		solve(1);
		solve(2);
		return;
	}
	bool final = false;
	int head = tail;
	final = pour(1, 2,pointer) || pour(1, 3,pointer) || pour(2, 1,pointer) || pour(2, 3,pointer)
		|| pour(3, 1,pointer) || pour(3, 2,pointer);
	for (int i = head; i < tail; i++)
		solve(i);
}
int main()
{
	init();
	solve(0);
	sort(ans, ans + num );
fout<<ans[0];
	for (int i = 1; i < num; i++)
		fout << ' '<<ans[i];
fout<<endl;
	return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <ctype.h>

#define MAX 20

typedef struct State	State;
struct State {
    int a[3];
};

int seen[MAX+1][MAX+1][MAX+1];
int canget[MAX+1];

State
state(int a, int b, int c)
{
    State s;

    s.a[0] = a;
    s.a[1] = b;
    s.a[2] = c;
    return s;
}

int cap[3];

/* pour from bucket "from" to bucket "to" */
State
pour(State s, int from, int to)
{
    int amt;

    amt = s.a[from];
    if(s.a[to]+amt > cap[to])
	amt = cap[to] - s.a[to];

    s.a[from] -= amt;
    s.a[to] += amt;
    return s;
}

void
search(State s)
{
    int i, j;

    if(seen[s.a[0]][s.a[1]][s.a[2]])
	return;

    seen[s.a[0]][s.a[1]][s.a[2]] = 1;

    if(s.a[0] == 0)	/* bucket A empty */
	canget[s.a[2]] = 1;

    for(i=0; i<3; i++)
    for(j=0; j<3; j++)
	search(pour(s, i, j)); //order
}

void
main(void)
{
    int i;
    FILE *fin, *fout;
    char *sep;

    fin = fopen("milk3.in", "r");
    fout = fopen("milk3.out", "w");
    assert(fin != NULL && fout != NULL);

    fscanf(fin, "%d %d %d", &cap[0], &cap[1], &cap[2]);

    search(state(0, 0, cap[2]));

    sep = "";
    for(i=0; i<=cap[2]; i++) {
	if(canget[i]) {
	    fprintf(fout, "%s%d", sep, i);
	    sep = " ";
	}
    }
    fprintf(fout, "\n");

    exit(0);
}













#include <stdio.h>
int A, B, C;
int CB[21][21]; // All states

void readFile() {
    FILE *f;
    f = fopen("milk3.in", "r");
    fscanf(f, "%d%d%d", &A, &B, &C);
    fclose(f);
}

void writeFile() {
    FILE *f; int i;
    f = fopen("milk3.out", "w");
    for(i = 0; i <= C; i++) {
        if(CB[i][C - i] == 1) {
            if((i != C-B) && (i != 0)) fprintf(f, " ");
            fprintf(f, "%d", i);
        }
    }
    fprintf(f, "\n");
    fclose(f);
}

// do brute-force search, c/b: current state
void search(int c, int b) {
    int a;
    if(CB[c][b] == 1) return; // already searched
    CB[c][b] = 1;
    a = C-b-c; // calc amount in A
    // do all moves:
    // c->b
    if(B < c+b) search(c - (B - b), B);
    else search(0, c + b);
    // b->c
    if(C < c+b) search(C, b - (C - c));
    else search(c + b, 0);
    // c->a
    if(A < c+a) search(c - (A - a), b);
    else search(0, b);
    // a->c
    if(C < c+a) search(C, b);
    else search(c + a, b);
    // b->a
    if(A < b+a) search(c, b - (A - a));
    else search(c, 0);
    // a->b
    if(B < b+a) search(c, B);
    else search(c, b + a);
   }
   
int main () {
    readFile();
    search(C, 0);
    writeFile();
    return 0;
}












Write a program to help FJ determine what amounts of milk he can leave in bucket C 
when he begins with three buckets as above, pours milk among the buckets for a while, 
and then notes that bucket A is empty. 
